# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZrE-Xnc0Tl-QX60uEQQOql9YQ6XSjP-
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# スタイル
sns.set(style="whitegrid")

# 定数設定
a, b, c, d = 0.7, 1.4, 4.0, 1.33
e, h, g = 0.6, 1.56, 0.88
N = 5

# 音階定義
base_freq = 27.5
kenban_list = [base_freq * (2 ** (i / 12)) for i in range(88)]

note_to_index = {
    'C': 39, 'C#': 40, 'D': 41, 'D#': 42, 'E': 43, 'F': 44,
    'F#': 45, 'G': 46, 'G#': 47, 'A': 48, 'A#': 49, 'B': 50
}

chord_types = {
    'Major': [0, 4, 7],
    'Minor': [0, 3, 7],
    'Sus4': [0, 5, 7],
    'Augmented': [0, 4, 8],
    'Diminished': [0, 3, 6],
    'Flat5': [0, 3, 6],
}

def D(f1, f2, f3, v1, v2, v3, N, a, b, c, d, g):
    R = range(1, N + 1)
    fot1 = [f1 * i for i in R]
    fot2 = [f2 * i for i in R]
    fot3 = [f3 * i for i in R]
    D1 = D2 = D3 = 0
    for j in range(N):
        for k in range(N):
            for (f_low, f_high, v_low, v_high) in [
                (fot1[k], fot2[j], v1, v2),
                (fot2[k], fot3[j], v2, v3),
                (fot1[k], fot3[j], v1, v3)
            ]:
                f_low, f_high = sorted([f_low, f_high])
                x = abs(12 * np.log2(f_high / f_low))
                A = -a * (x ** d)
                B = -b * (x ** d)
                v = np.sqrt(v_low * v_high * (g ** (j + k)))
                d_val = c * v * (np.exp(A) - np.exp(B))
                if (f_low, f_high) == sorted([fot1[k], fot2[j]]):
                    D1 += d_val
                elif (f_low, f_high) == sorted([fot2[k], fot3[j]]):
                    D2 += d_val
                else:
                    D3 += d_val
    return (D1 + D2 + D3) / 3

def TM(f1, f2, f3, v1, v2, v3, N, e, h, g):
    T = M = 0
    R = range(1, N + 1)
    fot1 = [f1 * i for i in R]
    fot2 = [f2 * i for i in R]
    fot3 = [f3 * i for i in R]
    for j in range(N):
        for k in range(N):
            for l in range(N):
                f = sorted([fot1[j], fot2[k], fot3[l]])
                v = (v1 * v2 * v3 * (g ** (j + k + l))) ** (1 / 3)
                x12 = 12 * np.log2(f[1] / f[0])
                x23 = 12 * np.log2(f[2] / f[1])
                t = v * np.exp(-((x23 - x12) / e) ** 2)
                m = -v * (2 * (x23 - x12) / h) * np.exp(-((x23 - x12) ** 4) / 4)
                T += t
                M += m
    return T, M

def I_0(D, T): return np.sqrt(D ** 2 + T ** 2)
def I_1(D, T, lam): return D + T * lam
def I_2(D, T, lam): return D * lam + T
def S_0(D, T, M): return np.abs(M) / np.sqrt(M ** 2 + D ** 2 + T ** 2)
def S_1(D, T, M): return np.abs(M) / np.sqrt(D ** 2 + T ** 2)

def get_frequencies(root_note, chord_type):
    root_index = note_to_index[root_note]
    indices = [root_index + i for i in chord_types[chord_type]]
    return [kenban_list[i] for i in indices]

# Streamlit UI
st.set_page_config(page_title="DTMIS Analyzer", layout="centered")
st.title("🎼 DTMIS Analyzer")
st.caption("和音の不協和度・緊張度・モダリティ評価ツール")

col1, col2 = st.columns(2)
root_note = col1.selectbox("ルート音 (Root Note)", list(note_to_index.keys()))
chord_type = col2.selectbox("コードタイプ (Chord Type)", list(chord_types.keys()))
lam = st.slider("λ (Lambda)", 0.0, 1.0, 0.5, step=0.01)

if st.button("🎵 評価を実行"):
    f1, f2, f3 = get_frequencies(root_note, chord_type)
    D_val = D(f1, f2, f3, 1, 1, 1, N, a, b, c, d, g)
    T_val, M_val = TM(f1, f2, f3, 1, 1, 1, N, e, h, g)
    I0 = I_0(D_val, T_val)
    I1 = I_1(D_val, T_val, lam)
    I2 = I_2(D_val, T_val, lam)
    S0 = S_0(D_val, T_val, M_val)
    S1 = S_1(D_val, T_val, M_val)

    df = pd.DataFrame({
        '指標': ['D', 'T', 'M', 'I₀', 'I₁', 'I₂', 'S₀', 'S₁'],
        '値': [D_val, T_val, M_val, I0, I1, I2, S0, S1]
    })

    st.subheader(f"結果：{root_note} {chord_type}（λ = {lam:.2f}）")
    st.dataframe(df.style.format({'値': '{:.4f}'}), use_container_width=True)

    fig, ax = plt.subplots(figsize=(8, 4))
    sns.barplot(data=df, x='指標', y='値', palette='coolwarm', ax=ax)
    ax.set_title(f'{root_note} {chord_type} の DTMIS 分析')
    ax.set_ylabel("値")
    st.pyplot(fig)